import React, { useState, useEffect } from 'react';
import axios from 'axios';

/**
 * Component: EveryRender
 * This component demonstrates various useEffect scenarios:
 * 1. Runs on every render.
 * 2. Runs once after the initial render (componentDidMount).
 * 3. Runs when specific state changes.
 * 4. Cleanup on unmounting.
 */
function EveryRender() {
  const [count, setCount] = useState(0);
  const [userId, setUserId] = useState(1);

  function handleInput(e) {
    setCount(e.target.value);
  }

  // Runs on every render (componentDidMount + componentDidUpdate)
  useEffect(() => {
    console.log("Every Render", count);
  });

  // Runs only once after the initial render (componentDidMount)
  useEffect(() => {
    console.log("MOUNTING", count);
  }, []);

  // Runs when `count` changes
  useEffect(() => {
    console.log("State based useEffect: count changed", count);
  }, [count]);

  // Runs when `userId` changes
  useEffect(() => {
    console.log("State based useEffect: userId changed", userId);
  }, [userId]);

  return (
    <>
      <label>User Id: </label>
      <input
        type="number"
        name="name"
        value={count}
        onChange={handleInput}
      />
      <UserEmail userId={userId} />
    </>
  );
}

/**
 * Component: UserEmail
 * This component fetches user email based on the userId prop.
 * Demonstrates useEffect with dependency to trigger updates on prop change.
 */
const UserEmail = (props) => {
  const [email, setEmail] = useState("");

  const updateEmail = async () => {
    const response = await fetch(`http://reqres.in/api/users/${props.userId}`);
    const result = await response.json();
    const email = result.data.email;
    setEmail(email);
  };

  // Fetch user email when `props.userId` changes
  useEffect(() => {
    updateEmail();
  }, [props.userId]);

  return (
    <div>
      UserEmail: {email}
    </div>
  );
};

export default UserEmail;

/**
 * Component: StockData
 * This component fetches stock data and includes a cleanup function in useEffect.
 * Demonstrates useEffect for data fetching and cleanup to prevent memory leaks.
 */
const StockData = () => {
  const [data, setData] = useState({ entry: 0, value: null });

  const getStockData = async () => {
    try {
      const res = await axios.get("URL+APIKEY");
      const response = res.data;
      const value = Object.values(response["Time Series (5min)"])[data.entry]["4. close"];
      setData(prevData => ({ ...prevData, value }));
    } catch (error) {
      console.error("Error fetching stock data:", error);
    }
  };

  useEffect(() => {
    let isMounted = true;
    const controller = new AbortController();

    const fetchStockData = async () => {
      try {
        const res = await axios.get("URL+APIKEY", { signal: controller.signal });
        if (isMounted) {
          const response = res.data;
          const value = Object.values(response["Time Series (5min)"])[data.entry]["4. close"];
          setData(prevData => ({ ...prevData, value }));
        }
      } catch (error) {
        if (isMounted) {
          console.error("Error fetching stock data:", error);
        }
      }
    };

    fetchStockData();

    return () => {
      isMounted = false;
      controller.abort();
    };
  }, [data.entry]);

  return (
    <div>
      IBM Stock Data {data.value && <span>{data.value}</span>}
    </div>
  );
};

export default StockData;

/**
 * Example usage of the StockData component with a checkbox to control its rendering.
 */
const App = () => {
  const [checked, setChecked] = useState(false);

  return (
    <>
      <input
        type="checkbox"
        checked={checked}
        onChange={(e) => setChecked(e.target.checked)}
      />
      {checked && <StockData />}
    </>
  );
};

export default App;

/**
 * Documentation:
 * - useEffect accepts a callback function that runs in different scenarios based on its dependencies.
 * - Mounting: useEffect(() => {}, []); - Runs once after the initial render.
 * - Every Render: useEffect(() => {}); - Runs on every render.
 * - State Dependency: useEffect(() => {}, [state]); - Runs when specific state changes.
 * - Cleanup on Unmounting: useEffect(() => { return () => { /* cleanup code */ } }, [dependency]);
 */

Explanation:
EveryRender Component:

Demonstrates useEffect in different scenarios: on every render, only on mount, and when specific state changes.
handleInput function updates the count state.
useEffect hooks log messages based on render and state changes.
UserEmail Component:

Fetches user email based on the userId prop.
updateEmail function fetches email data from an API.
useEffect triggers the email fetch when userId changes.
StockData Component:

Fetches stock data and includes a cleanup function to prevent memory leaks.
getStockData function fetches stock data using Axios.
useEffect fetches stock data on mount and when data.entry changes. Cleanup function aborts the fetch if the component unmounts.
App Component:

Controls the rendering of StockData component using a checkbox.
Documentation:

Explains the use of useEffect for different lifecycle stages: mounting, every render, state dependency, and cleanup on unmounting.
This code combines various examples of useEffect usage, showing how to handle side effects and cleanups in React functional components.
